/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package backtype.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-12")
public class MasterService {

  public interface Iface {

    public List<String> getAllHostNames() throws org.apache.thrift.TException;

    public void migrateTasks(String originalHostName, String targetHostName, int taskId, int routeNo) throws MigrationException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAllHostNames(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void migrateTasks(String originalHostName, String targetHostName, int taskId, int routeNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<String> getAllHostNames() throws org.apache.thrift.TException
    {
      send_getAllHostNames();
      return recv_getAllHostNames();
    }

    public void send_getAllHostNames() throws org.apache.thrift.TException
    {
      getAllHostNames_args args = new getAllHostNames_args();
      sendBase("getAllHostNames", args);
    }

    public List<String> recv_getAllHostNames() throws org.apache.thrift.TException
    {
      getAllHostNames_result result = new getAllHostNames_result();
      receiveBase(result, "getAllHostNames");
      if (result.is_set_success()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllHostNames failed: unknown result");
    }

    public void migrateTasks(String originalHostName, String targetHostName, int taskId, int routeNo) throws MigrationException, org.apache.thrift.TException
    {
      send_migrateTasks(originalHostName, targetHostName, taskId, routeNo);
      recv_migrateTasks();
    }

    public void send_migrateTasks(String originalHostName, String targetHostName, int taskId, int routeNo) throws org.apache.thrift.TException
    {
      migrateTasks_args args = new migrateTasks_args();
      args.set_originalHostName(originalHostName);
      args.set_targetHostName(targetHostName);
      args.set_taskId(taskId);
      args.set_routeNo(routeNo);
      sendBase("migrateTasks", args);
    }

    public void recv_migrateTasks() throws MigrationException, org.apache.thrift.TException
    {
      migrateTasks_result result = new migrateTasks_result();
      receiveBase(result, "migrateTasks");
      if (result.me != null) {
        throw result.me;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAllHostNames(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllHostNames_call method_call = new getAllHostNames_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllHostNames_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAllHostNames_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllHostNames", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllHostNames_args args = new getAllHostNames_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllHostNames();
      }
    }

    public void migrateTasks(String originalHostName, String targetHostName, int taskId, int routeNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      migrateTasks_call method_call = new migrateTasks_call(originalHostName, targetHostName, taskId, routeNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class migrateTasks_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String originalHostName;
      private String targetHostName;
      private int taskId;
      private int routeNo;
      public migrateTasks_call(String originalHostName, String targetHostName, int taskId, int routeNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originalHostName = originalHostName;
        this.targetHostName = targetHostName;
        this.taskId = taskId;
        this.routeNo = routeNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("migrateTasks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        migrateTasks_args args = new migrateTasks_args();
        args.set_originalHostName(originalHostName);
        args.set_targetHostName(targetHostName);
        args.set_taskId(taskId);
        args.set_routeNo(routeNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MigrationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_migrateTasks();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllHostNames", new getAllHostNames());
      processMap.put("migrateTasks", new migrateTasks());
      return processMap;
    }

    public static class getAllHostNames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllHostNames_args> {
      public getAllHostNames() {
        super("getAllHostNames");
      }

      public getAllHostNames_args getEmptyArgsInstance() {
        return new getAllHostNames_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllHostNames_result getResult(I iface, getAllHostNames_args args) throws org.apache.thrift.TException {
        getAllHostNames_result result = new getAllHostNames_result();
        result.success = iface.getAllHostNames();
        return result;
      }
    }

    public static class migrateTasks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, migrateTasks_args> {
      public migrateTasks() {
        super("migrateTasks");
      }

      public migrateTasks_args getEmptyArgsInstance() {
        return new migrateTasks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public migrateTasks_result getResult(I iface, migrateTasks_args args) throws org.apache.thrift.TException {
        migrateTasks_result result = new migrateTasks_result();
        try {
          iface.migrateTasks(args.originalHostName, args.targetHostName, args.taskId, args.routeNo);
        } catch (MigrationException me) {
          result.me = me;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAllHostNames", new getAllHostNames());
      processMap.put("migrateTasks", new migrateTasks());
      return processMap;
    }

    public static class getAllHostNames<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllHostNames_args, List<String>> {
      public getAllHostNames() {
        super("getAllHostNames");
      }

      public getAllHostNames_args getEmptyArgsInstance() {
        return new getAllHostNames_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getAllHostNames_result result = new getAllHostNames_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllHostNames_result result = new getAllHostNames_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllHostNames_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getAllHostNames(resultHandler);
      }
    }

    public static class migrateTasks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, migrateTasks_args, Void> {
      public migrateTasks() {
        super("migrateTasks");
      }

      public migrateTasks_args getEmptyArgsInstance() {
        return new migrateTasks_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            migrateTasks_result result = new migrateTasks_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            migrateTasks_result result = new migrateTasks_result();
            if (e instanceof MigrationException) {
                        result.me = (MigrationException) e;
                        result.set_me_isSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, migrateTasks_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.migrateTasks(args.originalHostName, args.targetHostName, args.taskId, args.routeNo,resultHandler);
      }
    }

  }

  public static class getAllHostNames_args implements org.apache.thrift.TBase<getAllHostNames_args, getAllHostNames_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllHostNames_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllHostNames_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllHostNames_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllHostNames_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllHostNames_args.class, metaDataMap);
    }

    public getAllHostNames_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllHostNames_args(getAllHostNames_args other) {
    }

    public getAllHostNames_args deepCopy() {
      return new getAllHostNames_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllHostNames_args)
        return this.equals((getAllHostNames_args)that);
      return false;
    }

    public boolean equals(getAllHostNames_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllHostNames_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllHostNames_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllHostNames_argsStandardSchemeFactory implements SchemeFactory {
      public getAllHostNames_argsStandardScheme getScheme() {
        return new getAllHostNames_argsStandardScheme();
      }
    }

    private static class getAllHostNames_argsStandardScheme extends StandardScheme<getAllHostNames_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllHostNames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllHostNames_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllHostNames_argsTupleSchemeFactory implements SchemeFactory {
      public getAllHostNames_argsTupleScheme getScheme() {
        return new getAllHostNames_argsTupleScheme();
      }
    }

    private static class getAllHostNames_argsTupleScheme extends TupleScheme<getAllHostNames_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllHostNames_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllHostNames_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAllHostNames_result implements org.apache.thrift.TBase<getAllHostNames_result, getAllHostNames_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllHostNames_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllHostNames_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllHostNames_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllHostNames_resultTupleSchemeFactory());
    }

    private List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllHostNames_result.class, metaDataMap);
    }

    public getAllHostNames_result() {
    }

    public getAllHostNames_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllHostNames_result(getAllHostNames_result other) {
      if (other.is_set_success()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getAllHostNames_result deepCopy() {
      return new getAllHostNames_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> get_success_iterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void add_to_success(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> get_success() {
      return this.success;
    }

    public void set_success(List<String> success) {
      this.success = success;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllHostNames_result)
        return this.equals((getAllHostNames_result)that);
      return false;
    }

    public boolean equals(getAllHostNames_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (is_set_success());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllHostNames_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(other.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllHostNames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllHostNames_resultStandardSchemeFactory implements SchemeFactory {
      public getAllHostNames_resultStandardScheme getScheme() {
        return new getAllHostNames_resultStandardScheme();
      }
    }

    private static class getAllHostNames_resultStandardScheme extends StandardScheme<getAllHostNames_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllHostNames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list664 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list664.size);
                  String _elem665;
                  for (int _i666 = 0; _i666 < _list664.size; ++_i666)
                  {
                    _elem665 = iprot.readString();
                    struct.success.add(_elem665);
                  }
                  iprot.readListEnd();
                }
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllHostNames_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter667 : struct.success)
            {
              oprot.writeString(_iter667);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllHostNames_resultTupleSchemeFactory implements SchemeFactory {
      public getAllHostNames_resultTupleScheme getScheme() {
        return new getAllHostNames_resultTupleScheme();
      }
    }

    private static class getAllHostNames_resultTupleScheme extends TupleScheme<getAllHostNames_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllHostNames_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_success()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_success()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter668 : struct.success)
            {
              oprot.writeString(_iter668);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllHostNames_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list669 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list669.size);
            String _elem670;
            for (int _i671 = 0; _i671 < _list669.size; ++_i671)
            {
              _elem670 = iprot.readString();
              struct.success.add(_elem670);
            }
          }
          struct.set_success_isSet(true);
        }
      }
    }

  }

  public static class migrateTasks_args implements org.apache.thrift.TBase<migrateTasks_args, migrateTasks_args._Fields>, java.io.Serializable, Cloneable, Comparable<migrateTasks_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("migrateTasks_args");

    private static final org.apache.thrift.protocol.TField ORIGINAL_HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("originalHostName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TARGET_HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("targetHostName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ROUTE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("routeNo", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new migrateTasks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new migrateTasks_argsTupleSchemeFactory());
    }

    private String originalHostName; // required
    private String targetHostName; // required
    private int taskId; // required
    private int routeNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGINAL_HOST_NAME((short)1, "originalHostName"),
      TARGET_HOST_NAME((short)2, "targetHostName"),
      TASK_ID((short)3, "taskId"),
      ROUTE_NO((short)4, "routeNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGINAL_HOST_NAME
            return ORIGINAL_HOST_NAME;
          case 2: // TARGET_HOST_NAME
            return TARGET_HOST_NAME;
          case 3: // TASK_ID
            return TASK_ID;
          case 4: // ROUTE_NO
            return ROUTE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private static final int __ROUTENO_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGINAL_HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("originalHostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TARGET_HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("targetHostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ROUTE_NO, new org.apache.thrift.meta_data.FieldMetaData("routeNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(migrateTasks_args.class, metaDataMap);
    }

    public migrateTasks_args() {
    }

    public migrateTasks_args(
      String originalHostName,
      String targetHostName,
      int taskId,
      int routeNo)
    {
      this();
      this.originalHostName = originalHostName;
      this.targetHostName = targetHostName;
      this.taskId = taskId;
      set_taskId_isSet(true);
      this.routeNo = routeNo;
      set_routeNo_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public migrateTasks_args(migrateTasks_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.is_set_originalHostName()) {
        this.originalHostName = other.originalHostName;
      }
      if (other.is_set_targetHostName()) {
        this.targetHostName = other.targetHostName;
      }
      this.taskId = other.taskId;
      this.routeNo = other.routeNo;
    }

    public migrateTasks_args deepCopy() {
      return new migrateTasks_args(this);
    }

    @Override
    public void clear() {
      this.originalHostName = null;
      this.targetHostName = null;
      set_taskId_isSet(false);
      this.taskId = 0;
      set_routeNo_isSet(false);
      this.routeNo = 0;
    }

    public String get_originalHostName() {
      return this.originalHostName;
    }

    public void set_originalHostName(String originalHostName) {
      this.originalHostName = originalHostName;
    }

    public void unset_originalHostName() {
      this.originalHostName = null;
    }

    /** Returns true if field originalHostName is set (has been assigned a value) and false otherwise */
    public boolean is_set_originalHostName() {
      return this.originalHostName != null;
    }

    public void set_originalHostName_isSet(boolean value) {
      if (!value) {
        this.originalHostName = null;
      }
    }

    public String get_targetHostName() {
      return this.targetHostName;
    }

    public void set_targetHostName(String targetHostName) {
      this.targetHostName = targetHostName;
    }

    public void unset_targetHostName() {
      this.targetHostName = null;
    }

    /** Returns true if field targetHostName is set (has been assigned a value) and false otherwise */
    public boolean is_set_targetHostName() {
      return this.targetHostName != null;
    }

    public void set_targetHostName_isSet(boolean value) {
      if (!value) {
        this.targetHostName = null;
      }
    }

    public int get_taskId() {
      return this.taskId;
    }

    public void set_taskId(int taskId) {
      this.taskId = taskId;
      set_taskId_isSet(true);
    }

    public void unset_taskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean is_set_taskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void set_taskId_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public int get_routeNo() {
      return this.routeNo;
    }

    public void set_routeNo(int routeNo) {
      this.routeNo = routeNo;
      set_routeNo_isSet(true);
    }

    public void unset_routeNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROUTENO_ISSET_ID);
    }

    /** Returns true if field routeNo is set (has been assigned a value) and false otherwise */
    public boolean is_set_routeNo() {
      return EncodingUtils.testBit(__isset_bitfield, __ROUTENO_ISSET_ID);
    }

    public void set_routeNo_isSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROUTENO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGINAL_HOST_NAME:
        if (value == null) {
          unset_originalHostName();
        } else {
          set_originalHostName((String)value);
        }
        break;

      case TARGET_HOST_NAME:
        if (value == null) {
          unset_targetHostName();
        } else {
          set_targetHostName((String)value);
        }
        break;

      case TASK_ID:
        if (value == null) {
          unset_taskId();
        } else {
          set_taskId((Integer)value);
        }
        break;

      case ROUTE_NO:
        if (value == null) {
          unset_routeNo();
        } else {
          set_routeNo((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGINAL_HOST_NAME:
        return get_originalHostName();

      case TARGET_HOST_NAME:
        return get_targetHostName();

      case TASK_ID:
        return Integer.valueOf(get_taskId());

      case ROUTE_NO:
        return Integer.valueOf(get_routeNo());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGINAL_HOST_NAME:
        return is_set_originalHostName();
      case TARGET_HOST_NAME:
        return is_set_targetHostName();
      case TASK_ID:
        return is_set_taskId();
      case ROUTE_NO:
        return is_set_routeNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof migrateTasks_args)
        return this.equals((migrateTasks_args)that);
      return false;
    }

    public boolean equals(migrateTasks_args that) {
      if (that == null)
        return false;

      boolean this_present_originalHostName = true && this.is_set_originalHostName();
      boolean that_present_originalHostName = true && that.is_set_originalHostName();
      if (this_present_originalHostName || that_present_originalHostName) {
        if (!(this_present_originalHostName && that_present_originalHostName))
          return false;
        if (!this.originalHostName.equals(that.originalHostName))
          return false;
      }

      boolean this_present_targetHostName = true && this.is_set_targetHostName();
      boolean that_present_targetHostName = true && that.is_set_targetHostName();
      if (this_present_targetHostName || that_present_targetHostName) {
        if (!(this_present_targetHostName && that_present_targetHostName))
          return false;
        if (!this.targetHostName.equals(that.targetHostName))
          return false;
      }

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_routeNo = true;
      boolean that_present_routeNo = true;
      if (this_present_routeNo || that_present_routeNo) {
        if (!(this_present_routeNo && that_present_routeNo))
          return false;
        if (this.routeNo != that.routeNo)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originalHostName = true && (is_set_originalHostName());
      list.add(present_originalHostName);
      if (present_originalHostName)
        list.add(originalHostName);

      boolean present_targetHostName = true && (is_set_targetHostName());
      list.add(present_targetHostName);
      if (present_targetHostName)
        list.add(targetHostName);

      boolean present_taskId = true;
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      boolean present_routeNo = true;
      list.add(present_routeNo);
      if (present_routeNo)
        list.add(routeNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(migrateTasks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_originalHostName()).compareTo(other.is_set_originalHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_originalHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalHostName, other.originalHostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_targetHostName()).compareTo(other.is_set_targetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_targetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetHostName, other.targetHostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_taskId()).compareTo(other.is_set_taskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_taskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_routeNo()).compareTo(other.is_set_routeNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_routeNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routeNo, other.routeNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("migrateTasks_args(");
      boolean first = true;

      sb.append("originalHostName:");
      if (this.originalHostName == null) {
        sb.append("null");
      } else {
        sb.append(this.originalHostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("targetHostName:");
      if (this.targetHostName == null) {
        sb.append("null");
      } else {
        sb.append(this.targetHostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("routeNo:");
      sb.append(this.routeNo);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class migrateTasks_argsStandardSchemeFactory implements SchemeFactory {
      public migrateTasks_argsStandardScheme getScheme() {
        return new migrateTasks_argsStandardScheme();
      }
    }

    private static class migrateTasks_argsStandardScheme extends StandardScheme<migrateTasks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, migrateTasks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGINAL_HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.originalHostName = iprot.readString();
                struct.set_originalHostName_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TARGET_HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.targetHostName = iprot.readString();
                struct.set_targetHostName_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.taskId = iprot.readI32();
                struct.set_taskId_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ROUTE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.routeNo = iprot.readI32();
                struct.set_routeNo_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, migrateTasks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originalHostName != null) {
          oprot.writeFieldBegin(ORIGINAL_HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.originalHostName);
          oprot.writeFieldEnd();
        }
        if (struct.targetHostName != null) {
          oprot.writeFieldBegin(TARGET_HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.targetHostName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI32(struct.taskId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ROUTE_NO_FIELD_DESC);
        oprot.writeI32(struct.routeNo);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class migrateTasks_argsTupleSchemeFactory implements SchemeFactory {
      public migrateTasks_argsTupleScheme getScheme() {
        return new migrateTasks_argsTupleScheme();
      }
    }

    private static class migrateTasks_argsTupleScheme extends TupleScheme<migrateTasks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, migrateTasks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_originalHostName()) {
          optionals.set(0);
        }
        if (struct.is_set_targetHostName()) {
          optionals.set(1);
        }
        if (struct.is_set_taskId()) {
          optionals.set(2);
        }
        if (struct.is_set_routeNo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.is_set_originalHostName()) {
          oprot.writeString(struct.originalHostName);
        }
        if (struct.is_set_targetHostName()) {
          oprot.writeString(struct.targetHostName);
        }
        if (struct.is_set_taskId()) {
          oprot.writeI32(struct.taskId);
        }
        if (struct.is_set_routeNo()) {
          oprot.writeI32(struct.routeNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, migrateTasks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.originalHostName = iprot.readString();
          struct.set_originalHostName_isSet(true);
        }
        if (incoming.get(1)) {
          struct.targetHostName = iprot.readString();
          struct.set_targetHostName_isSet(true);
        }
        if (incoming.get(2)) {
          struct.taskId = iprot.readI32();
          struct.set_taskId_isSet(true);
        }
        if (incoming.get(3)) {
          struct.routeNo = iprot.readI32();
          struct.set_routeNo_isSet(true);
        }
      }
    }

  }

  public static class migrateTasks_result implements org.apache.thrift.TBase<migrateTasks_result, migrateTasks_result._Fields>, java.io.Serializable, Cloneable, Comparable<migrateTasks_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("migrateTasks_result");

    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new migrateTasks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new migrateTasks_resultTupleSchemeFactory());
    }

    private MigrationException me; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ME((short)1, "me");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ME
            return ME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(migrateTasks_result.class, metaDataMap);
    }

    public migrateTasks_result() {
    }

    public migrateTasks_result(
      MigrationException me)
    {
      this();
      this.me = me;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public migrateTasks_result(migrateTasks_result other) {
      if (other.is_set_me()) {
        this.me = new MigrationException(other.me);
      }
    }

    public migrateTasks_result deepCopy() {
      return new migrateTasks_result(this);
    }

    @Override
    public void clear() {
      this.me = null;
    }

    public MigrationException get_me() {
      return this.me;
    }

    public void set_me(MigrationException me) {
      this.me = me;
    }

    public void unset_me() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean is_set_me() {
      return this.me != null;
    }

    public void set_me_isSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ME:
        if (value == null) {
          unset_me();
        } else {
          set_me((MigrationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ME:
        return get_me();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ME:
        return is_set_me();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof migrateTasks_result)
        return this.equals((migrateTasks_result)that);
      return false;
    }

    public boolean equals(migrateTasks_result that) {
      if (that == null)
        return false;

      boolean this_present_me = true && this.is_set_me();
      boolean that_present_me = true && that.is_set_me();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_me = true && (is_set_me());
      list.add(present_me);
      if (present_me)
        list.add(me);

      return list.hashCode();
    }

    @Override
    public int compareTo(migrateTasks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(is_set_me()).compareTo(other.is_set_me());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_me()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, other.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("migrateTasks_result(");
      boolean first = true;

      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class migrateTasks_resultStandardSchemeFactory implements SchemeFactory {
      public migrateTasks_resultStandardScheme getScheme() {
        return new migrateTasks_resultStandardScheme();
      }
    }

    private static class migrateTasks_resultStandardScheme extends StandardScheme<migrateTasks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, migrateTasks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MigrationException();
                struct.me.read(iprot);
                struct.set_me_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, migrateTasks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class migrateTasks_resultTupleSchemeFactory implements SchemeFactory {
      public migrateTasks_resultTupleScheme getScheme() {
        return new migrateTasks_resultTupleScheme();
      }
    }

    private static class migrateTasks_resultTupleScheme extends TupleScheme<migrateTasks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, migrateTasks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.is_set_me()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.is_set_me()) {
          struct.me.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, migrateTasks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.me = new MigrationException();
          struct.me.read(iprot);
          struct.set_me_isSet(true);
        }
      }
    }

  }

}
